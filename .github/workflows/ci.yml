name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

# Allow workflow to run without approval for PRs
permissions:
  contents: read
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.12-${{ hashFiles('requirements-ci.txt', 'requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.12-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        
        echo "=== Installing CI requirements ==="
        pip install -r requirements-ci.txt
        
        echo "=== Verifying core dependencies ==="
        python -c "import pydantic; print(f'✓ pydantic {pydantic.__version__}')"
        python -c "import pytest; print(f'✓ pytest {pytest.__version__}')"
        python -c "import aiohttp; print(f'✓ aiohttp {aiohttp.__version__}')"
        python -c "import websocket; print(f'✓ websocket-client installed')"

    - name: Lint and format with ruff
      run: |
        echo "=== Ruff linting and formatting ==="
        ruff check src/ tests/ --output-format=github
        ruff format --check src/ tests/

    - name: Run tests
      env:
        # Expose paper trading secrets as environment variables for integration tests
        PAPER_ALPACA_API_KEY: ${{ secrets.PAPER_ALPACA_API_KEY }}
        PAPER_ALPACA_API_SECRET: ${{ secrets.PAPER_ALPACA_API_SECRET }}
        PAPER_GEMINI_API_KEY: ${{ secrets.PAPER_GEMINI_API_KEY }}
        PAPER_GEMINI_API_SECRET: ${{ secrets.PAPER_GEMINI_API_SECRET }}
      run: |
        echo "=== Checking integration test credentials ==="
        if [ -n "$PAPER_ALPACA_API_KEY" ] && [ -n "$PAPER_ALPACA_API_SECRET" ]; then
          echo "✓ Alpaca paper trading credentials available"
          ALPACA_CREDS="available"
        else
          echo "⚠️  Alpaca paper trading credentials not available"
          ALPACA_CREDS="missing"
        fi
        
        if [ -n "$PAPER_GEMINI_API_KEY" ] && [ -n "$PAPER_GEMINI_API_SECRET" ]; then
          echo "✓ Gemini paper trading credentials available"
          GEMINI_CREDS="available"
        else
          echo "⚠️  Gemini paper trading credentials not available"
          GEMINI_CREDS="missing"
        fi
        
        echo "=== Running all tests ==="
        pytest tests/ -v --tb=short --strict-markers
        
        if [ "$ALPACA_CREDS" = "available" ] || [ "$GEMINI_CREDS" = "available" ]; then
          echo ""
          echo "=== Running integration tests ==="
          pytest tests/ -v --tb=short -m "integration" || echo "⚠️  Some integration tests failed"
        fi

    - name: Generate coverage report
      run: |
        echo "=== Generating coverage report ==="
        pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true

